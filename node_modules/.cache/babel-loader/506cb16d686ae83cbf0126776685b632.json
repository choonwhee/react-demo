{"ast":null,"code":"var _jsxFileName = \"/Users/choonwheepeh/demo/src/components/aTextField.js\";\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ATextField = props => {\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    label: generateLabel(props.label, props.name)\n  };\n  let autocomplete = props.autocompleteService === undefined && props.autocompleteOptions === undefined ? false : true;\n  if (props.defaultValue !== undefined) textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1) textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  console.log(textFieldProps);\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    console.log(textFieldProps);\n    console.log(\"params\" + autocompleteParams);\n    if (autocompleteParams === undefined) return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 14\n    }, this);else return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps,\n      ...autocompleteParams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this);\n  };\n\n  if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = {\n      id: name + \"_autocomplete\"\n    };\n\n    if (props.autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n      props.autocompleteGetOptionLabel === undefined ? autocompleteProps.getOptionLabel = option => option.label : autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel;\n    }\n\n    return /*#__PURE__*/_jsxDEV(Autocomplete, { ...autocompleteProps,\n      renderInput: params => renderTextField(textFieldProps, params)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_c = ATextField;\nexport default ATextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"ATextField\");","map":{"version":3,"sources":["/Users/choonwheepeh/demo/src/components/aTextField.js"],"names":["React","TextField","Autocomplete","generateLabel","generateName","ATextField","props","name","label","textFieldProps","id","autocomplete","autocompleteService","undefined","autocompleteOptions","defaultValue","value","multiline","rows","maxRows","console","log","renderTextField","autocompleteParams","autocompleteProps","options","autocompleteGetOptionLabel","getOptionLabel","option","params"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,SAA5C;;;AAIA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAMC,IAAI,GAAGH,YAAY,CAACE,KAAK,CAACC,IAAP,EAAaD,KAAK,CAACE,KAAnB,CAAzB;AACA,MAAIC,cAAc,GAAG;AACnBC,IAAAA,EAAE,EAAEH,IADe;AAEnBA,IAAAA,IAAI,EAAEA,IAFa;AAGnBC,IAAAA,KAAK,EAAEL,aAAa,CAACG,KAAK,CAACE,KAAP,EAAcF,KAAK,CAACC,IAApB;AAHD,GAArB;AAMA,MAAII,YAAY,GACdL,KAAK,CAACM,mBAAN,KAA8BC,SAA9B,IACAP,KAAK,CAACQ,mBAAN,KAA8BD,SAD9B,GAEI,KAFJ,GAGI,IAJN;AAMA,MAAIP,KAAK,CAACS,YAAN,KAAuBF,SAA3B,EACEJ,cAAc,CAACM,YAAf,GAA8BT,KAAK,CAACS,YAApC;AACF,MAAIT,KAAK,CAACU,KAAN,KAAgBH,SAApB,EAA+BJ,cAAc,CAACO,KAAf,GAAuBV,KAAK,CAACU,KAA7B;AAC/B,MAAIV,KAAK,CAACW,SAAN,KAAoB,IAApB,IAA4BX,KAAK,CAACY,IAAN,GAAa,CAAzC,IAA8CZ,KAAK,CAACa,OAAN,GAAgB,CAAlE,EACEV,cAAc,CAACQ,SAAf,GAA2B,IAA3B;AACF,MAAIX,KAAK,CAACY,IAAN,KAAeL,SAAnB,EAA8BJ,cAAc,CAACS,IAAf,GAAsBZ,KAAK,CAACY,IAA5B;AAC9B,MAAIZ,KAAK,CAACa,OAAN,KAAkBN,SAAtB,EAAiCJ,cAAc,CAACU,OAAf,GAAyBb,KAAK,CAACa,OAA/B;AAEjCC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ;;AAEA,QAAMa,eAAe,GAAG,CAACb,cAAD,EAAiBc,kBAAjB,KAAwC;AAC9DH,IAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWE,kBAAvB;AACA,QAAIA,kBAAkB,KAAKV,SAA3B,EACE,oBAAO,QAAC,SAAD,OAAeJ;AAAf;AAAA;AAAA;AAAA;AAAA,YAAP,CADF,KAEK,oBAAO,QAAC,SAAD,OAAeA,cAAf;AAAA,SAAmCc;AAAnC;AAAA;AAAA;AAAA;AAAA,YAAP;AACN,GAND;;AAQA,MAAI,CAACZ,YAAL,EAAmB;AACjB,WAAOW,eAAe,CAACb,cAAD,CAAtB;AACD,GAFD,MAEO;AACL,QAAIe,iBAAiB,GAAG;AAAEd,MAAAA,EAAE,EAAEH,IAAI,GAAG;AAAb,KAAxB;;AACA,QAAID,KAAK,CAACQ,mBAAN,KAA8BD,SAAlC,EAA6C;AAC3CW,MAAAA,iBAAiB,CAACC,OAAlB,GAA4BnB,KAAK,CAACQ,mBAAlC;AACAR,MAAAA,KAAK,CAACoB,0BAAN,KAAqCb,SAArC,GACKW,iBAAiB,CAACG,cAAlB,GAAoCC,MAAD,IAAYA,MAAM,CAACpB,KAD3D,GAEKgB,iBAAiB,CAACG,cAAlB,GAAmCrB,KAAK,CAACoB,0BAF9C;AAGD;;AAED,wBACE,QAAC,YAAD,OACMF,iBADN;AAEE,MAAA,WAAW,EAAGK,MAAD,IAAYP,eAAe,CAACb,cAAD,EAAiBoB,MAAjB;AAF1C;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;AACF,CAlDD;;KAAMxB,U;AAoDN,eAAeA,UAAf","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\n\n\n\nconst ATextField = (props) => {\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    label: generateLabel(props.label, props.name),\n  };\n\n  let autocomplete =\n    props.autocompleteService === undefined &&\n    props.autocompleteOptions === undefined\n      ? false\n      : true;\n\n  if (props.defaultValue !== undefined)\n    textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1)\n    textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n\n  console.log(textFieldProps);\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    console.log(textFieldProps);\n    console.log(\"params\" + autocompleteParams);\n    if (autocompleteParams === undefined)\n      return <TextField {...textFieldProps} />;\n    else return <TextField {...textFieldProps} {...autocompleteParams} />;\n  };\n\n  if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = { id: name + \"_autocomplete\" };\n    if (props.autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n      props.autocompleteGetOptionLabel === undefined\n        ? (autocompleteProps.getOptionLabel = (option) => option.label)\n        : (autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel);\n    }\n\n    return (\n      <Autocomplete\n        {...autocompleteProps}\n        renderInput={(params) => renderTextField(textFieldProps, params)}\n      />\n    );\n  }\n};\n\nexport default ATextField;\n"]},"metadata":{},"sourceType":"module"}