{"ast":null,"code":"var _jsxFileName = \"/Users/choonwheepeh/demo/src/components/aTextField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\n/*\nTextarea\nmultiline if multiline is true then rendered as a text area. If rows or maxRows are set then multiline is automatically set to true\nrows = number of rows (height) for the textarea\nmaxRows = number rows can grow until it reach maxRows. default to infinite\n\nAutoComplete\nautocompleteService: takes endpoint and calls backend service. backend service should return an array of objects with a label field. to map non standard objects set autocompleteGetOptionLabel \nautocompleteGetOptionLabel: function used to map label value to custom object. It pass the function to Material UI's TextField getOptionLabel\nautocompleteOptions: takes an array of objects with a label value by default. Use autocompleteGetOptionLabel\n\nvariant\nvariant = accepts standard material ui options like standard, filled and outlined and also added additional variations like leftLabel and topLabel. default to leftLabel\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ATextField = props => {\n  _s();\n\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\n  const [mode] = useState(props.mode);\n  let autocomplete = props.autocompleteService === undefined && props.autocompleteOptions === undefined ? false : true;\n  let variant = props.variant === \"left\";\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    label: generateLabel(props.label, props.name)\n  };\n  if (props.defaultValue !== undefined) textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1) textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  if (mode === \"disabled\") textFieldProps.disabled = true;\n  if (props.required !== undefined) textFieldProps.required = props.required;\n  if (props.error !== undefined) textFieldProps.error = props.error;\n  if (props.helperText !== undefined) textFieldProps.helperText = props.helperText;\n  if (props.mode === \"readOnly\") if (props.mode === \"readOnly\") textFieldProps.InputProps = {\n    readOnly: true\n  };\n  console.log(textFieldProps);\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    if (autocompleteParams === undefined) return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 14\n    }, this);else return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps,\n      ...autocompleteParams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this);\n  };\n\n  if (mode === \"hidden\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"none\"\n      },\n      children: renderTextField(textFieldProps)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  } else if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = {\n      id: name + \"_autocomplete\"\n    };\n\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.options = autocompleteOptions;\n\n      if (props.autocompleteGetOptionSelected === undefined) {\n        autocompleteProps.getOptionSelected = (option, value) => option.value === value.value;\n      } else {\n        autocompleteProps.getOptionSelected = props.autocompleteGetOptionSelected;\n      }\n\n      autocompleteProps.onInputChange = (event, value) => {\n        event.stopPropagation();\n        console.log(\"Autocomplete - Service: \" + props.autocompleteService + \" | Input Value: \" + value);\n        fetch(\"https://swapi-deno.azurewebsites.net/api/starships\").then(response => response.json()).then(options => setAutocompleteOptions(options));\n      };\n    } else if (autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n    }\n\n    props.autocompleteGetOptionLabel === undefined ? autocompleteProps.getOptionLabel = option => option.label : autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel;\n    return /*#__PURE__*/_jsxDEV(Autocomplete, { ...autocompleteProps,\n      renderInput: params => renderTextField(textFieldProps, params)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(ATextField, \"XNhtZDytsRL5aXYS3CZSmYyCeYc=\");\n\n_c = ATextField;\nexport default ATextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"ATextField\");","map":{"version":3,"sources":["/Users/choonwheepeh/demo/src/components/aTextField.js"],"names":["React","useState","TextField","Autocomplete","generateLabel","generateName","ATextField","props","autocompleteOptions","setAutocompleteOptions","mode","autocomplete","autocompleteService","undefined","variant","name","label","textFieldProps","id","defaultValue","value","multiline","rows","maxRows","disabled","required","error","helperText","InputProps","readOnly","console","log","renderTextField","autocompleteParams","display","autocompleteProps","options","autocompleteGetOptionSelected","getOptionSelected","option","onInputChange","event","stopPropagation","fetch","then","response","json","autocompleteGetOptionLabel","getOptionLabel","params"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\n\n/*\nTextarea\nmultiline if multiline is true then rendered as a text area. If rows or maxRows are set then multiline is automatically set to true\nrows = number of rows (height) for the textarea\nmaxRows = number rows can grow until it reach maxRows. default to infinite\n\nAutoComplete\nautocompleteService: takes endpoint and calls backend service. backend service should return an array of objects with a label field. to map non standard objects set autocompleteGetOptionLabel \nautocompleteGetOptionLabel: function used to map label value to custom object. It pass the function to Material UI's TextField getOptionLabel\nautocompleteOptions: takes an array of objects with a label value by default. Use autocompleteGetOptionLabel\n\nvariant\nvariant = accepts standard material ui options like standard, filled and outlined and also added additional variations like leftLabel and topLabel. default to leftLabel\n\n*/\n\nconst ATextField = (props) => {\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\n  const [mode] = useState(props.mode);\n\n  let autocomplete =\n    props.autocompleteService === undefined &&\n    props.autocompleteOptions === undefined\n      ? false\n      : true;\n\n  let variant = props.variant === \"left\"\n\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    label: generateLabel(props.label, props.name),\n  };\n\n  if (props.defaultValue !== undefined)\n    textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1)\n    textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  if (mode === \"disabled\") textFieldProps.disabled = true;\n  if (props.required !== undefined) textFieldProps.required = props.required;\n  if (props.error !== undefined) textFieldProps.error = props.error;\n  if (props.helperText !== undefined)\n    textFieldProps.helperText = props.helperText;\n  if (props.mode === \"readOnly\")\n    if (props.mode === \"readOnly\")\n      textFieldProps.InputProps = {\n        readOnly: true,\n      };\n\n  console.log(textFieldProps);\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    if (autocompleteParams === undefined)\n      return <TextField {...textFieldProps} />;\n    else return <TextField {...textFieldProps} {...autocompleteParams} />;\n  };\n\n  if (mode === \"hidden\") {\n    return (\n      <div style={{ display: \"none\" }}>{renderTextField(textFieldProps)}</div>\n    );\n  } else if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = { id: name + \"_autocomplete\" };\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.options = autocompleteOptions;\n      if (props.autocompleteGetOptionSelected === undefined) {\n        autocompleteProps.getOptionSelected = (option, value) =>\n          option.value === value.value;\n      } else {\n        autocompleteProps.getOptionSelected =\n          props.autocompleteGetOptionSelected;\n      }\n      autocompleteProps.onInputChange = (event, value) => {\n        event.stopPropagation();\n        console.log(\n          \"Autocomplete - Service: \" +\n            props.autocompleteService +\n            \" | Input Value: \" +\n            value\n        );\n        fetch(\"https://swapi-deno.azurewebsites.net/api/starships\")\n          .then((response) => response.json())\n          .then((options) => setAutocompleteOptions(options));\n      };\n    } else if (autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n    }\n    props.autocompleteGetOptionLabel === undefined\n      ? (autocompleteProps.getOptionLabel = (option) => option.label)\n      : (autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel);\n    return (\n      <Autocomplete\n        {...autocompleteProps}\n        renderInput={(params) => renderTextField(textFieldProps, params)}\n      />\n    );\n  }\n};\n\nexport default ATextField;\n"]},"metadata":{},"sourceType":"module"}