{"ast":null,"code":"var _jsxFileName = \"/Users/choonwheepeh/demo/src/components/aTextField.js\";\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ATextField = props => {\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    label: generateLabel(props.label, props.name)\n  };\n  if (props.defaultValue !== undefined) textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1) textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  console.log(textFieldProps);\n\n  const renderTextField = textFieldProps => {\n    /*#__PURE__*/\n    _jsxDEV(TextField, { ...textFieldProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this);\n  };\n\n  if (props.autocompleteService === undefined && props.options === undefined) {\n    return renderTextField(textFieldProps);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Autocomplete, {\n      id: \"combo-box-demo\",\n      options: [{\n        label: 1,\n        value: 1\n      }],\n      getOptionLabel: option => option.label,\n      style: {\n        width: 300\n      },\n      renderInput: params => renderTextField(params)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_c = ATextField;\nexport default ATextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"ATextField\");","map":{"version":3,"sources":["/Users/choonwheepeh/demo/src/components/aTextField.js"],"names":["React","TextField","Autocomplete","generateLabel","generateName","ATextField","props","name","label","textFieldProps","id","defaultValue","undefined","value","multiline","rows","maxRows","console","log","renderTextField","autocompleteService","options","option","width","params"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,SAA5C;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAMC,IAAI,GAAGH,YAAY,CAACE,KAAK,CAACC,IAAP,EAAaD,KAAK,CAACE,KAAnB,CAAzB;AACA,MAAIC,cAAc,GAAG;AACnBC,IAAAA,EAAE,EAAEH,IADe;AAEnBA,IAAAA,IAAI,EAAEA,IAFa;AAGnBC,IAAAA,KAAK,EAAEL,aAAa,CAACG,KAAK,CAACE,KAAP,EAAcF,KAAK,CAACC,IAApB;AAHD,GAArB;AAMA,MAAID,KAAK,CAACK,YAAN,KAAuBC,SAA3B,EACEH,cAAc,CAACE,YAAf,GAA8BL,KAAK,CAACK,YAApC;AACF,MAAIL,KAAK,CAACO,KAAN,KAAgBD,SAApB,EAA+BH,cAAc,CAACI,KAAf,GAAuBP,KAAK,CAACO,KAA7B;AAC/B,MAAIP,KAAK,CAACQ,SAAN,KAAoB,IAApB,IAA4BR,KAAK,CAACS,IAAN,GAAa,CAAzC,IAA8CT,KAAK,CAACU,OAAN,GAAgB,CAAlE,EACEP,cAAc,CAACK,SAAf,GAA2B,IAA3B;AACF,MAAIR,KAAK,CAACS,IAAN,KAAeH,SAAnB,EAA8BH,cAAc,CAACM,IAAf,GAAsBT,KAAK,CAACS,IAA5B;AAC9B,MAAIT,KAAK,CAACU,OAAN,KAAkBJ,SAAtB,EAAiCH,cAAc,CAACO,OAAf,GAAyBV,KAAK,CAACU,OAA/B;AAEjCC,EAAAA,OAAO,CAACC,GAAR,CAAYT,cAAZ;;AAEA,QAAMU,eAAe,GAAIV,cAAD,IAAoB;AAC1C;AAAA,YAAC,SAAD,OAAeA;AAAf;AAAA;AAAA;AAAA;AAAA;AACD,GAFD;;AAIA,MAAIH,KAAK,CAACc,mBAAN,KAA8BR,SAA9B,IAA2CN,KAAK,CAACe,OAAN,KAAkBT,SAAjE,EAA4E;AAC1E,WAAOO,eAAe,CAACV,cAAD,CAAtB;AACD,GAFD,MAEO;AACL,wBACE,QAAC,YAAD;AACE,MAAA,EAAE,EAAC,gBADL;AAEE,MAAA,OAAO,EAAE,CAAC;AAAED,QAAAA,KAAK,EAAE,CAAT;AAAYK,QAAAA,KAAK,EAAE;AAAnB,OAAD,CAFX;AAGE,MAAA,cAAc,EAAGS,MAAD,IAAYA,MAAM,CAACd,KAHrC;AAIE,MAAA,KAAK,EAAE;AAAEe,QAAAA,KAAK,EAAE;AAAT,OAJT;AAKE,MAAA,WAAW,EAAGC,MAAD,IAAYL,eAAe,CAACK,MAAD;AAL1C;AAAA;AAAA;AAAA;AAAA,YADF;AASD;AACF,CAnCD;;KAAMnB,U;AAqCN,eAAeA,UAAf","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\n\nconst ATextField = (props) => {\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    label: generateLabel(props.label, props.name),\n  };\n\n  if (props.defaultValue !== undefined)\n    textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1)\n    textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n\n  console.log(textFieldProps);\n\n  const renderTextField = (textFieldProps) => {\n    <TextField {...textFieldProps} />;\n  };\n\n  if (props.autocompleteService === undefined && props.options === undefined) {\n    return renderTextField(textFieldProps);\n  } else {\n    return (\n      <Autocomplete\n        id=\"combo-box-demo\"\n        options={[{ label: 1, value: 1 }]}\n        getOptionLabel={(option) => option.label}\n        style={{ width: 300 }}\n        renderInput={(params) => renderTextField(params)}\n      />\n    );\n  }\n};\n\nexport default ATextField;\n"]},"metadata":{},"sourceType":"module"}