{"ast":null,"code":"var _jsxFileName = \"/Users/choonwheepeh/demo/src/components/aTextField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ATextField = props => {\n  _s();\n\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\n  let autocomplete = props.autocompleteService === undefined && autocompleteOptions === undefined ? false : true;\n\n  if (autoc) {}\n\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    label: generateLabel(props.label, props.name)\n  };\n  if (props.defaultValue !== undefined) textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1) textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  console.log(textFieldProps);\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    console.log(textFieldProps);\n    console.log(\"params\" + autocompleteParams);\n    if (autocompleteParams === undefined) return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 14\n    }, this);else return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps,\n      ...autocompleteParams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this);\n  };\n\n  if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = {\n      id: name + \"_autocomplete\"\n    };\n\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.onChange = () => {\n        console.log(\"onChange-fetch starships\");\n        fetch(\"https://swapi-deno.azurewebsites.net/api/starships\").then(response => response.json()).then(options => setAutocompleteOptions(options));\n      };\n    }\n\n    if (autocompleteOptions !== undefined) {\n      autocompleteProps.options = autocompleteOptions;\n    }\n\n    props.autocompleteGetOptionLabel === undefined ? autocompleteProps.getOptionLabel = option => option.label : autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel;\n    return /*#__PURE__*/_jsxDEV(Autocomplete, { ...autocompleteProps,\n      renderInput: params => renderTextField(textFieldProps, params)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(ATextField, \"UGOtRrwrwPRJuo3T66quv4gngOg=\");\n\n_c = ATextField;\nexport default ATextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"ATextField\");","map":{"version":3,"sources":["/Users/choonwheepeh/demo/src/components/aTextField.js"],"names":["React","useState","TextField","Autocomplete","generateLabel","generateName","ATextField","props","autocompleteOptions","setAutocompleteOptions","autocomplete","autocompleteService","undefined","autoc","name","label","textFieldProps","id","defaultValue","value","multiline","rows","maxRows","console","log","renderTextField","autocompleteParams","autocompleteProps","onChange","fetch","then","response","json","options","autocompleteGetOptionLabel","getOptionLabel","option","params"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\n\nconst ATextField = (props) => {\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\n\n  let autocomplete =\n    props.autocompleteService === undefined && autocompleteOptions === undefined\n      ? false\n      : true;\n\n  if (autoc) {\n\n  }    \n\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    label: generateLabel(props.label, props.name),\n  };\n\n  if (props.defaultValue !== undefined)\n    textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1)\n    textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n\n  console.log(textFieldProps);\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    console.log(textFieldProps);\n    console.log(\"params\" + autocompleteParams);\n    if (autocompleteParams === undefined)\n      return <TextField {...textFieldProps} />;\n    else return <TextField {...textFieldProps} {...autocompleteParams} />;\n  };\n\n  if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = { id: name + \"_autocomplete\" };\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.onChange = () => {\n        console.log(\"onChange-fetch starships\");\n        fetch(\"https://swapi-deno.azurewebsites.net/api/starships\")\n          .then((response) => response.json())\n          .then((options) => setAutocompleteOptions(options));\n      };\n    }\n    if (autocompleteOptions !== undefined) {\n      autocompleteProps.options = autocompleteOptions;\n    }\n    props.autocompleteGetOptionLabel === undefined\n      ? (autocompleteProps.getOptionLabel = (option) => option.label)\n      : (autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel);\n\n    return (\n      <Autocomplete\n        {...autocompleteProps}\n        renderInput={(params) => renderTextField(textFieldProps, params)}\n      />\n    );\n  }\n};\n\nexport default ATextField;\n"]},"metadata":{},"sourceType":"module"}