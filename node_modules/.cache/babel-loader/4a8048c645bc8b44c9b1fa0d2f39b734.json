{"ast":null,"code":"var _jsxFileName = \"/Users/choonwheepeh/demo/src/components/aTextField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\n/*\nTextarea\nmultiline if multiline is true then rendered as a text area. If rows or maxRows are set then multiline is automatically set to true\nrows = number of rows (height) for the textarea\nmaxRows = number rows can grow until it reach maxRows. default to infinite\n\nAutoComplete\nautocompleteService: takes endpoint and calls backend service. backend service should return an array of objects with a label field. to map non standard objects set autocompleteGetOptionLabel \nautocompleteGetOptionLabel: function used to map label value to custom object. It pass the function to Material UI's TextField getOptionLabel\nautocompleteOptions: takes an array of objects with a label value by default. Use autocompleteGetOptionLabel\n\nVariant\nvariant = accepts standard material ui options like standard, filled and outlined and also added additional variations like classic and questionnaire. default to classic\n\n\nMode Evaluation\nThe purpose of this functionality is to allow translation of functional mode into the rendering mode \ni.e. actual mode the field should be rendered as. \nCurrently only [\"readOnly\"|\"edit\"|\"disabled\"|\"hidden\"] are valid render modes.\nFor example, if a form is in \"create\" mode should each field be editable or readOnly or disabled or hidden? \nIf a form is in a custom state \"approval\" mode what actual mode should the field be rendered as?\nThe component will evaluate mode props (provided by the field, the parent AForm or use default fallback value) against \nmodeMapping (provided by the field, the parent AForm or use default fall back mapping). \n\n\nmode: mode of the component. \ndefault_mode: default mode provided by parent AForm if mode is not provided\nmode will take precedence over default_mode. This allow field level settings to override parent AForm's defaults\nif both mode and default_mode is not available (usually because field in not wrapped by an AForm), then it will \nfall back to default mode \"edit\".\n\ndefault_mode: default mode passed down from parent AForm. \n\nmodeMapping: mapping of parent AForm mode into a valid value of this component's mode. \nmodeMapping is an object that is used like a map. \nEach property name is the unEvaluated mode and the property value is the final field mode that the field need to render.\n\ndefault_mode_mapping: default mode mapping passed down from parent AForm. \n\nmodeMapping and default_mode_mapping will be merged with modeMapping (field level mapping) \ntaking precedence over default_mode_mapping (parent AForm level mapping).\nif both modeMapping and default_mode_mapping is not available (usually because field is not wrapped by an AForm), then it \nwill fall back to default minimal mapping (so that fields unwrapped by AForm will still be able to support the basic modes for the field).\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useClasses = makeStyles(theme => ({\n  infoIcon: {\n    fill: \"#999999\",\n    \"&:hover\": {\n      fill: \"#3366ff\"\n    }\n  }\n}));\n\nconst ATextField = props => {\n  _s();\n\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\n  let modeMapping = {\n    readOnly: \"readOnly\",\n    edit: \"edit\",\n    disabled: \"disabled\",\n    hidden: \"hidden\"\n  };\n  if (props.modeMapping !== undefined && props.default_mode_mapping !== undefined) modeMapping = { ...modeMapping,\n    ...props.default_mode_mapping,\n    ...props.modeMapping\n  };else if (props.modeMapping !== undefined) modeMapping = { ...modeMapping,\n    ...props.modeMapping\n  };else if (props.default_mode_mapping !== undefined) modeMapping = { ...modeMapping,\n    ...props.default_mode_mapping\n  };\n  let unEvalMode = \"edit\";\n  console.log(\"Final Mode Mapping: \" + JSON.stringify(modeMapping));\n  if (props.mode !== undefined) unEvalMode = props.mode;else if (props.default_mode !== undefined) unEvalMode = props.default_mode;\n  console.log(\"Final Field Level Mode to be evaluated: \" + unEvalMode); //Evaluate unEvalMode against modeMapping to get final field mode\n\n  const mode = modeMapping[unEvalMode];\n  console.log(\"Final Mode after evaluating against mapping: \" + mode);\n  const variant = props.variant === undefined ? props.default_variant === undefined ? \"classic\" : props.default_variant : props.variant;\n  const classes = useClasses();\n  const autocomplete = props.autocompleteService === undefined && props.autocompleteOptions === undefined ? false : true;\n  const customVariant = variant === \"classic\" || variant === \"questionnaire\" ? true : false;\n  const label = generateLabel(props.label, props.name);\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    fullWidth: true\n  };\n  if (customVariant) textFieldProps.label = \"\";else textFieldProps.label = label;\n  if (props.defaultValue !== undefined) textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1) textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  if (mode === \"disabled\") textFieldProps.disabled = true;\n  if (props.required !== undefined) textFieldProps.required = props.required;\n  if (props.error !== undefined) textFieldProps.error = props.error;\n  if (props.helperText !== undefined) textFieldProps.helperText = props.helperText;\n  textFieldProps.InputProps = { ...props.InputProps\n  };\n  if (mode === \"readOnly\") textFieldProps.InputProps.readOnly = true;\n  if (customVariant) textFieldProps.variant = \"outlined\";else if (!customVariant) textFieldProps.variant = variant;\n  props.size === undefined ? textFieldProps.size = \"small\" : textFieldProps.size = props.size;\n  console.log(textFieldProps);\n\n  const renderCustomVariant = inputRender => {\n    if (variant === \"classic\") {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"flex-start\",\n        width: props.width === undefined ? \"100%\" : props.width,\n        mt: \"20px\",\n        mb: \"20px\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          width: \"150px\",\n          textAlign: \"right\",\n          pr: \"10px\",\n          pt: \"7.5px\",\n          color: props.error ? \"#ee0000\" : \"\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: [label, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          flex: \"1\",\n          children: inputRender\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          pl: \"10px\",\n          pt: \"7.5px\",\n          width: \"34px\",\n          children: props.info === undefined ? \"\" : renderInfo()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this);\n    } else if (variant === \"questionnaire\") {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"flex-start\",\n        width: props.width === undefined ? \"100%\" : props.width,\n        mt: \"20px\",\n        mb: \"20px\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-start\",\n          width: \"100%\",\n          textAlign: \"left\",\n          pr: \"10px\",\n          pt: \"7.5px\",\n          color: props.error ? \"#ee0000\" : \"\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            pl: \"10px\",\n            width: \"34px\",\n            children: props.info === undefined ? \"\" : renderInfo()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            flex: \"1\",\n            children: inputRender\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this);\n    } else {\n      return inputRender;\n    }\n  };\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    if (customVariant) {\n      return renderCustomVariant(renderInputField(textFieldProps, autocompleteParams));\n    } else {\n      return renderInputField(textFieldProps, autocompleteParams);\n    }\n  };\n\n  const renderAutocompleteInput = (autocompleteProps, textFieldProps) => {\n    return /*#__PURE__*/_jsxDEV(Autocomplete, { ...autocompleteProps,\n      renderInput: params => renderInputField(textFieldProps, params)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderInfo = () => {\n    return /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: props.info,\n      children: /*#__PURE__*/_jsxDEV(InfoOutlinedIcon, {\n        classes: {\n          root: classes.infoIcon\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderInputField = (textFieldProps, autocompleteParams) => {\n    if (autocompleteParams === undefined) return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 14\n    }, this);else return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps,\n      ...autocompleteParams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }, this);\n  };\n\n  if (mode === \"hidden\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"none\"\n      },\n      children: renderTextField(textFieldProps)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this);\n  } else if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = {\n      id: name + \"_autocomplete\",\n      size: \"small\"\n    };\n\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.options = autocompleteOptions;\n\n      if (props.autocompleteGetOptionSelected === undefined) {\n        autocompleteProps.getOptionSelected = (option, value) => option.value === value.value;\n      } else {\n        autocompleteProps.getOptionSelected = props.autocompleteGetOptionSelected;\n      }\n\n      autocompleteProps.onInputChange = (event, value) => {\n        event.stopPropagation();\n        console.log(\"Autocomplete - Service: \" + props.autocompleteService + \" | Input Value: \" + value);\n        fetch(\"https://swapi.dev/api/starships/?format=json\") //alternate: https://swapi-deno.azurewebsites.net/api/starships\n        .then(response => response.json()).then(options => setAutocompleteOptions(options));\n      };\n    } else if (autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n    }\n\n    props.autocompleteGetOptionLabel === undefined ? autocompleteProps.getOptionLabel = option => option.label : autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel;\n    return renderCustomVariant(renderAutocompleteInput(autocompleteProps, textFieldProps));\n  }\n};\n\n_s(ATextField, \"KEopn1uifCwrEDyUVcLj2mkWR5A=\", false, function () {\n  return [useClasses];\n});\n\n_c = ATextField;\nexport default ATextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"ATextField\");","map":{"version":3,"sources":["/Users/choonwheepeh/demo/src/components/aTextField.js"],"names":["React","useState","makeStyles","TextField","Box","Autocomplete","generateLabel","generateName","Typography","Tooltip","InfoOutlinedIcon","useClasses","theme","infoIcon","fill","ATextField","props","autocompleteOptions","setAutocompleteOptions","modeMapping","readOnly","edit","disabled","hidden","undefined","default_mode_mapping","unEvalMode","console","log","JSON","stringify","mode","default_mode","variant","default_variant","classes","autocomplete","autocompleteService","customVariant","label","name","textFieldProps","id","fullWidth","defaultValue","value","multiline","rows","maxRows","required","error","helperText","InputProps","size","renderCustomVariant","inputRender","width","info","renderInfo","renderTextField","autocompleteParams","renderInputField","renderAutocompleteInput","autocompleteProps","params","root","display","options","autocompleteGetOptionSelected","getOptionSelected","option","onInputChange","event","stopPropagation","fetch","then","response","json","autocompleteGetOptionLabel","getOptionLabel"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\n\n/*\nTextarea\nmultiline if multiline is true then rendered as a text area. If rows or maxRows are set then multiline is automatically set to true\nrows = number of rows (height) for the textarea\nmaxRows = number rows can grow until it reach maxRows. default to infinite\n\nAutoComplete\nautocompleteService: takes endpoint and calls backend service. backend service should return an array of objects with a label field. to map non standard objects set autocompleteGetOptionLabel \nautocompleteGetOptionLabel: function used to map label value to custom object. It pass the function to Material UI's TextField getOptionLabel\nautocompleteOptions: takes an array of objects with a label value by default. Use autocompleteGetOptionLabel\n\nVariant\nvariant = accepts standard material ui options like standard, filled and outlined and also added additional variations like classic and questionnaire. default to classic\n\n\nMode Evaluation\nThe purpose of this functionality is to allow translation of functional mode into the rendering mode \ni.e. actual mode the field should be rendered as. \nCurrently only [\"readOnly\"|\"edit\"|\"disabled\"|\"hidden\"] are valid render modes.\nFor example, if a form is in \"create\" mode should each field be editable or readOnly or disabled or hidden? \nIf a form is in a custom state \"approval\" mode what actual mode should the field be rendered as?\nThe component will evaluate mode props (provided by the field, the parent AForm or use default fallback value) against \nmodeMapping (provided by the field, the parent AForm or use default fall back mapping). \n\n\nmode: mode of the component. \ndefault_mode: default mode provided by parent AForm if mode is not provided\nmode will take precedence over default_mode. This allow field level settings to override parent AForm's defaults\nif both mode and default_mode is not available (usually because field in not wrapped by an AForm), then it will \nfall back to default mode \"edit\".\n\ndefault_mode: default mode passed down from parent AForm. \n\nmodeMapping: mapping of parent AForm mode into a valid value of this component's mode. \nmodeMapping is an object that is used like a map. \nEach property name is the unEvaluated mode and the property value is the final field mode that the field need to render.\n\ndefault_mode_mapping: default mode mapping passed down from parent AForm. \n\nmodeMapping and default_mode_mapping will be merged with modeMapping (field level mapping) \ntaking precedence over default_mode_mapping (parent AForm level mapping).\nif both modeMapping and default_mode_mapping is not available (usually because field is not wrapped by an AForm), then it \nwill fall back to default minimal mapping (so that fields unwrapped by AForm will still be able to support the basic modes for the field).\n*/\n\nconst useClasses = makeStyles((theme) => ({\n  infoIcon: {\n    fill: \"#999999\",\n    \"&:hover\": {\n      fill: \"#3366ff\",\n    },\n  },\n}));\n\nconst ATextField = (props) => {\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\n  let modeMapping = {\n    readOnly: \"readOnly\",\n    edit: \"edit\",\n    disabled: \"disabled\",\n    hidden: \"hidden\",\n  };\n  if (\n    props.modeMapping !== undefined &&\n    props.default_mode_mapping !== undefined\n  )\n    modeMapping = {\n      ...modeMapping,\n      ...props.default_mode_mapping,\n      ...props.modeMapping,\n    };\n  else if (props.modeMapping !== undefined)\n    modeMapping = { ...modeMapping, ...props.modeMapping };\n  else if (props.default_mode_mapping !== undefined)\n    modeMapping = { ...modeMapping, ...props.default_mode_mapping };\n\n  let unEvalMode = \"edit\";\n\n  console.log(\"Final Mode Mapping: \" + JSON.stringify(modeMapping));\n\n  if (props.mode !== undefined) unEvalMode = props.mode;\n  else if (props.default_mode !== undefined) unEvalMode = props.default_mode;\n\n  console.log(\"Final Field Level Mode to be evaluated: \" + unEvalMode);\n\n  //Evaluate unEvalMode against modeMapping to get final field mode\n  const mode = modeMapping[unEvalMode];\n\n  console.log(\"Final Mode after evaluating against mapping: \" + mode);\n\n  const variant =\n    props.variant === undefined\n      ? props.default_variant === undefined\n        ? \"classic\"\n        : props.default_variant\n      : props.variant;\n\n  const classes = useClasses();\n\n  const autocomplete =\n    props.autocompleteService === undefined &&\n    props.autocompleteOptions === undefined\n      ? false\n      : true;\n\n  const customVariant =\n    variant === \"classic\" || variant === \"questionnaire\" ? true : false;\n\n  const label = generateLabel(props.label, props.name);\n\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    fullWidth: true,\n  };\n\n  if (customVariant) textFieldProps.label = \"\";\n  else textFieldProps.label = label;\n\n  if (props.defaultValue !== undefined)\n    textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1)\n    textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  if (mode === \"disabled\") textFieldProps.disabled = true;\n  if (props.required !== undefined) textFieldProps.required = props.required;\n  if (props.error !== undefined) textFieldProps.error = props.error;\n  if (props.helperText !== undefined)\n    textFieldProps.helperText = props.helperText;\n  textFieldProps.InputProps = { ...props.InputProps };\n  if (mode === \"readOnly\") textFieldProps.InputProps.readOnly = true;\n\n  if (customVariant) textFieldProps.variant = \"outlined\";\n  else if (!customVariant) textFieldProps.variant = variant;\n  props.size === undefined\n    ? (textFieldProps.size = \"small\")\n    : (textFieldProps.size = props.size);\n\n  console.log(textFieldProps);\n\n  const renderCustomVariant = (inputRender) => {\n    if (variant === \"classic\") {\n      return (\n        <Box\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"flex-start\"\n          width={props.width === undefined ? \"100%\" : props.width}\n          mt=\"20px\"\n          mb=\"20px\"\n        >\n          <Box\n            width=\"150px\"\n            textAlign=\"right\"\n            pr=\"10px\"\n            pt=\"7.5px\"\n            color={props.error ? \"#ee0000\" : \"\"}\n          >\n            <Typography>{label}:</Typography>\n          </Box>\n          <Box flex=\"1\">{inputRender}</Box>\n          <Box pl=\"10px\" pt=\"7.5px\" width=\"34px\">\n            {props.info === undefined ? \"\" : renderInfo()}\n          </Box>\n        </Box>\n      );\n    } else if (variant === \"questionnaire\") {\n      return (\n        <Box\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"flex-start\"\n          width={props.width === undefined ? \"100%\" : props.width}\n          mt=\"20px\"\n          mb=\"20px\"\n        >\n          <Box\n            display=\"flex\"\n            flexDirection=\"row\"\n            justifyContent=\"flex-start\"\n            width=\"100%\"\n            textAlign=\"left\"\n            pr=\"10px\"\n            pt=\"7.5px\"\n            color={props.error ? \"#ee0000\" : \"\"}\n          >\n            <Typography>{label}</Typography>\n            <Box pl=\"10px\" width=\"34px\">\n              {props.info === undefined ? \"\" : renderInfo()}\n            </Box>\n          </Box>\n          <Box>\n            <Box flex=\"1\">{inputRender}</Box>\n          </Box>\n        </Box>\n      );\n    } else {\n      return inputRender;\n    }\n  };\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    if (customVariant) {\n      return renderCustomVariant(\n        renderInputField(textFieldProps, autocompleteParams)\n      );\n    } else {\n      return renderInputField(textFieldProps, autocompleteParams);\n    }\n  };\n\n  const renderAutocompleteInput = (autocompleteProps, textFieldProps) => {\n    return (\n      <Autocomplete\n        {...autocompleteProps}\n        renderInput={(params) => renderInputField(textFieldProps, params)}\n      />\n    );\n  };\n\n  const renderInfo = () => {\n    return (\n      <Tooltip title={props.info}>\n        <InfoOutlinedIcon classes={{ root: classes.infoIcon }} />\n      </Tooltip>\n    );\n  };\n\n  const renderInputField = (textFieldProps, autocompleteParams) => {\n    if (autocompleteParams === undefined)\n      return <TextField {...textFieldProps} />;\n    else return <TextField {...textFieldProps} {...autocompleteParams} />;\n  };\n\n  if (mode === \"hidden\") {\n    return (\n      <div style={{ display: \"none\" }}>{renderTextField(textFieldProps)}</div>\n    );\n  } else if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = {\n      id: name + \"_autocomplete\",\n      size: \"small\",\n    };\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.options = autocompleteOptions;\n      if (props.autocompleteGetOptionSelected === undefined) {\n        autocompleteProps.getOptionSelected = (option, value) =>\n          option.value === value.value;\n      } else {\n        autocompleteProps.getOptionSelected =\n          props.autocompleteGetOptionSelected;\n      }\n      autocompleteProps.onInputChange = (event, value) => {\n        event.stopPropagation();\n        console.log(\n          \"Autocomplete - Service: \" +\n            props.autocompleteService +\n            \" | Input Value: \" +\n            value\n        );\n        fetch(\"https://swapi.dev/api/starships/?format=json\") //alternate: https://swapi-deno.azurewebsites.net/api/starships\n          .then((response) => response.json())\n          .then((options) => setAutocompleteOptions(options));\n      };\n    } else if (autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n    }\n    props.autocompleteGetOptionLabel === undefined\n      ? (autocompleteProps.getOptionLabel = (option) => option.label)\n      : (autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel);\n    return renderCustomVariant(\n      renderAutocompleteInput(autocompleteProps, textFieldProps)\n    );\n  }\n};\n\nexport default ATextField;\n"]},"metadata":{},"sourceType":"module"}