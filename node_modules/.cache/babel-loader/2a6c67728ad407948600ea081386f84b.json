{"ast":null,"code":"var _jsxFileName = \"/Users/choonwheepeh/demo/src/components/aTextField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\n/*\nTextarea\nmultiline if multiline is true then rendered as a text area. If rows or maxRows are set then multiline is automatically set to true\nrows = number of rows (height) for the textarea\nmaxRows = number rows can grow until it reach maxRows. default to infinite\n\nAutoComplete\nautocompleteService: takes endpoint and calls backend service. backend service should return an array of objects with a label field. to map non standard objects set autocompleteGetOptionLabel \nautocompleteGetOptionLabel: function used to map label value to custom object. It pass the function to Material UI's TextField getOptionLabel\nautocompleteOptions: takes an array of objects with a label value by default. Use autocompleteGetOptionLabel\n\nvariant\nvariant = accepts standard material ui options like standard, filled and outlined and also added additional variations like leftLabel and topLabel. default to leftLabel\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useClasses = makeStyles(theme => ({\n  infoIcon: {\n    fill: \"#999999\",\n    \"&:hover\": {\n      fill: \"#3366ff\"\n    }\n  }\n}));\n\nconst ATextField = props => {\n  _s();\n\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\n  const [mode] = useState(props.mode);\n  const classes = useClasses();\n  const autocomplete = props.autocompleteService === undefined && props.autocompleteOptions === undefined ? false : true;\n  const variant = props.variant === undefined ? \"leftLabel\" : props.variant;\n  const customVariant = variant === \"leftLabel\" || variant === \"topLabel\" ? true : false;\n  const label = generateLabel(props.label, props.name);\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    fullWidth: true\n  };\n  if (customVariant) textFieldProps.label = \"\";else textFieldProps.label = label;\n  if (props.defaultValue !== undefined) textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1) textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  if (mode === \"disabled\") textFieldProps.disabled = true;\n  if (props.required !== undefined) textFieldProps.required = props.required;\n  if (props.error !== undefined) textFieldProps.error = props.error;\n  if (props.helperText !== undefined) textFieldProps.helperText = props.helperText;\n  textFieldProps.InputProps = { ...props.InputProps\n  };\n  if (props.mode === \"readOnly\") textFieldProps.InputProps.readOnly = true;\n  if (customVariant) textFieldProps.variant = \"outlined\";else if (!customVariant) textFieldProps.variant = props.variant;\n  props.size === undefined ? textFieldProps.size = \"small\" : textFieldProps.size = props.size;\n  console.log(textFieldProps);\n\n  const renderCustomVariant = inputRender => {\n    if (labe) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"flex-start\",\n        width: props.width === undefined ? \"100%\" : props.width,\n        mt: \"20px\",\n        mb: \"20px\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          width: \"150px\",\n          textAlign: \"right\",\n          pr: \"10px\",\n          pt: \"7.5px\",\n          color: props.error ? \"#ee0000\" : \"\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: [label, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          flex: \"1\",\n          children: inputRender\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          pl: \"10px\",\n          pt: \"7.5px\",\n          width: \"34px\",\n          children: props.info === undefined ? \"\" : renderInfo()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this);\n    }\n  };\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    if (customVariant) {\n      return renderCustomVariant(renderInputField(textFieldProps, autocompleteParams));\n    } else {\n      return renderInputField(textFieldProps, autocompleteParams);\n    }\n  };\n\n  const renderAutocompleteInput = (autocompleteProps, textFieldProps) => {\n    return /*#__PURE__*/_jsxDEV(Autocomplete, { ...autocompleteProps,\n      renderInput: params => renderInputField(textFieldProps, params)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderInfo = () => {\n    return /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: props.info,\n      children: /*#__PURE__*/_jsxDEV(InfoOutlinedIcon, {\n        classes: {\n          root: classes.infoIcon\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderInputField = (textFieldProps, autocompleteParams) => {\n    if (autocompleteParams === undefined) return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 14\n    }, this);else return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps,\n      ...autocompleteParams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this);\n  };\n\n  if (mode === \"hidden\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"none\"\n      },\n      children: renderTextField(textFieldProps)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this);\n  } else if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = {\n      id: name + \"_autocomplete\",\n      size: \"small\"\n    };\n\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.options = autocompleteOptions;\n\n      if (props.autocompleteGetOptionSelected === undefined) {\n        autocompleteProps.getOptionSelected = (option, value) => option.value === value.value;\n      } else {\n        autocompleteProps.getOptionSelected = props.autocompleteGetOptionSelected;\n      }\n\n      autocompleteProps.onInputChange = (event, value) => {\n        event.stopPropagation();\n        console.log(\"Autocomplete - Service: \" + props.autocompleteService + \" | Input Value: \" + value);\n        fetch(\"https://swapi.dev/api/starships/?format=json\") //alternate: https://swapi-deno.azurewebsites.net/api/starships\n        .then(response => response.json()).then(options => setAutocompleteOptions(options));\n      };\n    } else if (autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n    }\n\n    props.autocompleteGetOptionLabel === undefined ? autocompleteProps.getOptionLabel = option => option.label : autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel;\n    return renderCustomVariant(renderAutocompleteInput(autocompleteProps, textFieldProps));\n  }\n};\n\n_s(ATextField, \"yJqHtLPQbig52TojdGwycDEzkPI=\", false, function () {\n  return [useClasses];\n});\n\n_c = ATextField;\nexport default ATextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"ATextField\");","map":{"version":3,"sources":["/Users/choonwheepeh/demo/src/components/aTextField.js"],"names":["React","useState","makeStyles","TextField","Box","Autocomplete","generateLabel","generateName","Typography","Tooltip","InfoOutlinedIcon","useClasses","theme","infoIcon","fill","ATextField","props","autocompleteOptions","setAutocompleteOptions","mode","classes","autocomplete","autocompleteService","undefined","variant","customVariant","label","name","textFieldProps","id","fullWidth","defaultValue","value","multiline","rows","maxRows","disabled","required","error","helperText","InputProps","readOnly","size","console","log","renderCustomVariant","inputRender","labe","width","info","renderInfo","renderTextField","autocompleteParams","renderInputField","renderAutocompleteInput","autocompleteProps","params","root","display","options","autocompleteGetOptionSelected","getOptionSelected","option","onInputChange","event","stopPropagation","fetch","then","response","json","autocompleteGetOptionLabel","getOptionLabel"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\n\n/*\nTextarea\nmultiline if multiline is true then rendered as a text area. If rows or maxRows are set then multiline is automatically set to true\nrows = number of rows (height) for the textarea\nmaxRows = number rows can grow until it reach maxRows. default to infinite\n\nAutoComplete\nautocompleteService: takes endpoint and calls backend service. backend service should return an array of objects with a label field. to map non standard objects set autocompleteGetOptionLabel \nautocompleteGetOptionLabel: function used to map label value to custom object. It pass the function to Material UI's TextField getOptionLabel\nautocompleteOptions: takes an array of objects with a label value by default. Use autocompleteGetOptionLabel\n\nvariant\nvariant = accepts standard material ui options like standard, filled and outlined and also added additional variations like leftLabel and topLabel. default to leftLabel\n\n*/\n\nconst useClasses = makeStyles((theme) => ({\n  infoIcon: {\n    fill: \"#999999\",\n    \"&:hover\": {\n      fill: \"#3366ff\",\n    },\n  },\n}));\n\nconst ATextField = (props) => {\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\n  const [mode] = useState(props.mode);\n\n  const classes = useClasses();\n\n  const autocomplete =\n    props.autocompleteService === undefined &&\n    props.autocompleteOptions === undefined\n      ? false\n      : true;\n\n  const variant = props.variant === undefined ? \"leftLabel\" : props.variant;\n  const customVariant =\n    variant === \"leftLabel\" || variant === \"topLabel\" ? true : false;\n\n  const label = generateLabel(props.label, props.name);\n\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    fullWidth: true,\n  };\n\n  if (customVariant) textFieldProps.label = \"\";\n  else textFieldProps.label = label;\n\n  if (props.defaultValue !== undefined)\n    textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1)\n    textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  if (mode === \"disabled\") textFieldProps.disabled = true;\n  if (props.required !== undefined) textFieldProps.required = props.required;\n  if (props.error !== undefined) textFieldProps.error = props.error;\n  if (props.helperText !== undefined)\n    textFieldProps.helperText = props.helperText;\n  textFieldProps.InputProps = { ...props.InputProps };\n  if (props.mode === \"readOnly\") textFieldProps.InputProps.readOnly = true;\n\n  if (customVariant) textFieldProps.variant = \"outlined\";\n  else if (!customVariant) textFieldProps.variant = props.variant;\n  props.size === undefined\n    ? (textFieldProps.size = \"small\")\n    : (textFieldProps.size = props.size);\n\n  console.log(textFieldProps);\n\n  const renderCustomVariant = (inputRender) => {\n    if (labe) {\n    return (\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"flex-start\"\n        width={props.width === undefined ? \"100%\" : props.width}\n        mt=\"20px\"\n        mb=\"20px\"\n      >\n        <Box\n          width=\"150px\"\n          textAlign=\"right\"\n          pr=\"10px\"\n          pt=\"7.5px\"\n          color={props.error ? \"#ee0000\" : \"\"}\n        >\n          <Typography>{label}:</Typography>\n        </Box>\n        <Box flex=\"1\">{inputRender}</Box>\n        <Box pl=\"10px\" pt=\"7.5px\" width=\"34px\">\n          {props.info === undefined ? \"\" : renderInfo()}\n        </Box>\n      </Box>\n    );\n    }\n  };\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    if (customVariant) {\n      return renderCustomVariant(\n        renderInputField(textFieldProps, autocompleteParams)\n      );\n    } else {\n      return renderInputField(textFieldProps, autocompleteParams);\n    }\n  };\n\n  const renderAutocompleteInput = (autocompleteProps, textFieldProps) => {\n    return (\n      <Autocomplete\n        {...autocompleteProps}\n        renderInput={(params) => renderInputField(textFieldProps, params)}\n      />\n    );\n  };\n\n  const renderInfo = () => {\n    return (\n      <Tooltip title={props.info}>\n        <InfoOutlinedIcon classes={{ root: classes.infoIcon }} />\n      </Tooltip>\n    );\n  };\n\n  const renderInputField = (textFieldProps, autocompleteParams) => {\n    if (autocompleteParams === undefined)\n      return <TextField {...textFieldProps} />;\n    else return <TextField {...textFieldProps} {...autocompleteParams} />;\n  };\n\n  if (mode === \"hidden\") {\n    return (\n      <div style={{ display: \"none\" }}>{renderTextField(textFieldProps)}</div>\n    );\n  } else if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = {\n      id: name + \"_autocomplete\",\n      size: \"small\",\n    };\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.options = autocompleteOptions;\n      if (props.autocompleteGetOptionSelected === undefined) {\n        autocompleteProps.getOptionSelected = (option, value) =>\n          option.value === value.value;\n      } else {\n        autocompleteProps.getOptionSelected =\n          props.autocompleteGetOptionSelected;\n      }\n      autocompleteProps.onInputChange = (event, value) => {\n        event.stopPropagation();\n        console.log(\n          \"Autocomplete - Service: \" +\n            props.autocompleteService +\n            \" | Input Value: \" +\n            value\n        );\n        fetch(\"https://swapi.dev/api/starships/?format=json\") //alternate: https://swapi-deno.azurewebsites.net/api/starships\n          .then((response) => response.json())\n          .then((options) => setAutocompleteOptions(options));\n      };\n    } else if (autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n    }\n    props.autocompleteGetOptionLabel === undefined\n      ? (autocompleteProps.getOptionLabel = (option) => option.label)\n      : (autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel);\n    return renderCustomVariant(\n      renderAutocompleteInput(autocompleteProps, textFieldProps)\n    );\n  }\n};\n\nexport default ATextField;\n"]},"metadata":{},"sourceType":"module"}