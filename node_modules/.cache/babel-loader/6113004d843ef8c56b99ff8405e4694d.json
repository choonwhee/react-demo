{"ast":null,"code":"var _jsxFileName = \"/Users/choonwheepeh/demo/src/components/aTextField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\n/*\nTextarea\nmultiline if multiline is true then rendered as a text area. If rows or maxRows are set then multiline is automatically set to true\nrows = number of rows (height) for the textarea\nmaxRows = number rows can grow until it reach maxRows. default to infinite\n\nAutoComplete\nautocompleteService: takes endpoint and calls backend service. backend service should return an array of objects with a label field. to map non standard objects set autocompleteGetOptionLabel \nautocompleteGetOptionLabel: function used to map label value to custom object. It pass the function to Material UI's TextField getOptionLabel\nautocompleteOptions: takes an array of objects with a label value by default. Use autocompleteGetOptionLabel\n\nvariant\nvariant = accepts standard material ui options like standard, filled and outlined and also added additional variations like classic and questionnaire. default to classic\n\nmode: mode of the component - readOnly | edit | disabled | hidden. \ndefault_mode, modeMapping and default_mode_mapping will be ignored if mode is provided as a prop\n\ndefault_mode: default mode passed down from parent AForm - parent AForm modes can have additional values and \ncustom values not supported in mode, but additional values will have to be predefined supported values in AFrom or \nadditional custom mappings provided via parent AForm's defaultModeMapping prop or field level component's modeMapping prop. \nif mode is empty, default_mode will be evaluated against the merged mapping of modeMapping and default_mode_mapping to \ndetermine the field's mode. If the default mode is unable to match against the mappings successfully, \nmode will be set to the fall back value \"edit\".\n\nmodeMapping: mapping of parent AForm mode into a valid value of this component's mode.\ndefault_mode_mapping: default mode mapping passed down from parent AForm. \nmodeMapping and default_mode_mapping will be merged with modeMapping (field level mapping) taking precedence over default_mode_mapping (parent AForm level mapping).\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useClasses = makeStyles(theme => ({\n  infoIcon: {\n    fill: \"#999999\",\n    \"&:hover\": {\n      fill: \"#3366ff\"\n    }\n  }\n}));\n\nconst ATextField = props => {\n  _s();\n\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\n  let mode;\n\n  if (props.mode !== undefined) {\n    mode = props.mode;\n  } else {\n    let modeMapping;\n\n    if (props.modeMapping !== undefined && props.default_mode_mapping !== undefined) {\n      modeMapping = { ...props.default_mode_mapping,\n        ...props.modeMapping\n      };\n    } else if (props.modeMapping !== undefined) {\n      modeMapping = props.modeMapping;\n    } else if (props.default_mode_mapping !== undefined) {\n      modeMapping = props.default_mode_mapping;\n    }\n  }\n\n  const variant = props.variant === undefined ? props.default_variant === undefined ? \"classic\" : props.default_variant : props.variant;\n  const classes = useClasses();\n  const autocomplete = props.autocompleteService === undefined && props.autocompleteOptions === undefined ? false : true;\n  const customVariant = variant === \"classic\" || variant === \"questionnaire\" ? true : false;\n  const label = generateLabel(props.label, props.name);\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    fullWidth: true\n  };\n  if (customVariant) textFieldProps.label = \"\";else textFieldProps.label = label;\n  if (props.defaultValue !== undefined) textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1) textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  if (mode === \"disabled\") textFieldProps.disabled = true;\n  if (props.required !== undefined) textFieldProps.required = props.required;\n  if (props.error !== undefined) textFieldProps.error = props.error;\n  if (props.helperText !== undefined) textFieldProps.helperText = props.helperText;\n  textFieldProps.InputProps = { ...props.InputProps\n  };\n  if (mode === \"readOnly\") textFieldProps.InputProps.readOnly = true;\n  if (customVariant) textFieldProps.variant = \"outlined\";else if (!customVariant) textFieldProps.variant = variant;\n  props.size === undefined ? textFieldProps.size = \"small\" : textFieldProps.size = props.size;\n  console.log(textFieldProps);\n\n  const renderCustomVariant = inputRender => {\n    if (variant === \"classic\") {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"flex-start\",\n        width: props.width === undefined ? \"100%\" : props.width,\n        mt: \"20px\",\n        mb: \"20px\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          width: \"150px\",\n          textAlign: \"right\",\n          pr: \"10px\",\n          pt: \"7.5px\",\n          color: props.error ? \"#ee0000\" : \"\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: [label, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          flex: \"1\",\n          children: inputRender\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          pl: \"10px\",\n          pt: \"7.5px\",\n          width: \"34px\",\n          children: props.info === undefined ? \"\" : renderInfo()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this);\n    } else if (variant === \"questionnaire\") {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"flex-start\",\n        width: props.width === undefined ? \"100%\" : props.width,\n        mt: \"20px\",\n        mb: \"20px\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-start\",\n          width: \"100%\",\n          textAlign: \"left\",\n          pr: \"10px\",\n          pt: \"7.5px\",\n          color: props.error ? \"#ee0000\" : \"\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            pl: \"10px\",\n            width: \"34px\",\n            children: props.info === undefined ? \"\" : renderInfo()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            flex: \"1\",\n            children: inputRender\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this);\n    } else {\n      return inputRender;\n    }\n  };\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    if (customVariant) {\n      return renderCustomVariant(renderInputField(textFieldProps, autocompleteParams));\n    } else {\n      return renderInputField(textFieldProps, autocompleteParams);\n    }\n  };\n\n  const renderAutocompleteInput = (autocompleteProps, textFieldProps) => {\n    return /*#__PURE__*/_jsxDEV(Autocomplete, { ...autocompleteProps,\n      renderInput: params => renderInputField(textFieldProps, params)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderInfo = () => {\n    return /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: props.info,\n      children: /*#__PURE__*/_jsxDEV(InfoOutlinedIcon, {\n        classes: {\n          root: classes.infoIcon\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderInputField = (textFieldProps, autocompleteParams) => {\n    if (autocompleteParams === undefined) return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 14\n    }, this);else return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps,\n      ...autocompleteParams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }, this);\n  };\n\n  if (mode === \"hidden\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"none\"\n      },\n      children: renderTextField(textFieldProps)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this);\n  } else if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = {\n      id: name + \"_autocomplete\",\n      size: \"small\"\n    };\n\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.options = autocompleteOptions;\n\n      if (props.autocompleteGetOptionSelected === undefined) {\n        autocompleteProps.getOptionSelected = (option, value) => option.value === value.value;\n      } else {\n        autocompleteProps.getOptionSelected = props.autocompleteGetOptionSelected;\n      }\n\n      autocompleteProps.onInputChange = (event, value) => {\n        event.stopPropagation();\n        console.log(\"Autocomplete - Service: \" + props.autocompleteService + \" | Input Value: \" + value);\n        fetch(\"https://swapi.dev/api/starships/?format=json\") //alternate: https://swapi-deno.azurewebsites.net/api/starships\n        .then(response => response.json()).then(options => setAutocompleteOptions(options));\n      };\n    } else if (autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n    }\n\n    props.autocompleteGetOptionLabel === undefined ? autocompleteProps.getOptionLabel = option => option.label : autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel;\n    return renderCustomVariant(renderAutocompleteInput(autocompleteProps, textFieldProps));\n  }\n};\n\n_s(ATextField, \"KEopn1uifCwrEDyUVcLj2mkWR5A=\", false, function () {\n  return [useClasses];\n});\n\n_c = ATextField;\nexport default ATextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"ATextField\");","map":{"version":3,"sources":["/Users/choonwheepeh/demo/src/components/aTextField.js"],"names":["React","useState","makeStyles","TextField","Box","Autocomplete","generateLabel","generateName","Typography","Tooltip","InfoOutlinedIcon","useClasses","theme","infoIcon","fill","ATextField","props","autocompleteOptions","setAutocompleteOptions","mode","undefined","modeMapping","default_mode_mapping","variant","default_variant","classes","autocomplete","autocompleteService","customVariant","label","name","textFieldProps","id","fullWidth","defaultValue","value","multiline","rows","maxRows","disabled","required","error","helperText","InputProps","readOnly","size","console","log","renderCustomVariant","inputRender","width","info","renderInfo","renderTextField","autocompleteParams","renderInputField","renderAutocompleteInput","autocompleteProps","params","root","display","options","autocompleteGetOptionSelected","getOptionSelected","option","onInputChange","event","stopPropagation","fetch","then","response","json","autocompleteGetOptionLabel","getOptionLabel"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\n\n/*\nTextarea\nmultiline if multiline is true then rendered as a text area. If rows or maxRows are set then multiline is automatically set to true\nrows = number of rows (height) for the textarea\nmaxRows = number rows can grow until it reach maxRows. default to infinite\n\nAutoComplete\nautocompleteService: takes endpoint and calls backend service. backend service should return an array of objects with a label field. to map non standard objects set autocompleteGetOptionLabel \nautocompleteGetOptionLabel: function used to map label value to custom object. It pass the function to Material UI's TextField getOptionLabel\nautocompleteOptions: takes an array of objects with a label value by default. Use autocompleteGetOptionLabel\n\nvariant\nvariant = accepts standard material ui options like standard, filled and outlined and also added additional variations like classic and questionnaire. default to classic\n\nmode: mode of the component - readOnly | edit | disabled | hidden. \ndefault_mode, modeMapping and default_mode_mapping will be ignored if mode is provided as a prop\n\ndefault_mode: default mode passed down from parent AForm - parent AForm modes can have additional values and \ncustom values not supported in mode, but additional values will have to be predefined supported values in AFrom or \nadditional custom mappings provided via parent AForm's defaultModeMapping prop or field level component's modeMapping prop. \nif mode is empty, default_mode will be evaluated against the merged mapping of modeMapping and default_mode_mapping to \ndetermine the field's mode. If the default mode is unable to match against the mappings successfully, \nmode will be set to the fall back value \"edit\".\n\nmodeMapping: mapping of parent AForm mode into a valid value of this component's mode.\ndefault_mode_mapping: default mode mapping passed down from parent AForm. \nmodeMapping and default_mode_mapping will be merged with modeMapping (field level mapping) taking precedence over default_mode_mapping (parent AForm level mapping).\n*/\n\nconst useClasses = makeStyles((theme) => ({\n  infoIcon: {\n    fill: \"#999999\",\n    \"&:hover\": {\n      fill: \"#3366ff\",\n    },\n  },\n}));\n\nconst ATextField = (props) => {\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\n  let mode;\n  if (props.mode !== undefined) {\n    mode = props.mode;\n  } else {\n    let modeMapping;\n    if ((props.modeMapping !== undefined && props.default_mode_mapping !== undefined)) {\n      modeMapping = {... props. default_mode_mapping, ... props.modeMapping}\n    } else if (props.modeMapping !== undefined) {\n      modeMapping = props.modeMapping;\n    } else if (props.default_mode_mapping !== undefined) {\n      modeMapping = props.default_mode_mapping\n    }\n    \n  } \n   \n  const variant =\n    props.variant === undefined\n      ? props.default_variant === undefined\n        ? \"classic\"\n        : props.default_variant\n      : props.variant;\n\n  const classes = useClasses();\n\n  const autocomplete =\n    props.autocompleteService === undefined &&\n    props.autocompleteOptions === undefined\n      ? false\n      : true;\n\n  const customVariant =\n    variant === \"classic\" || variant === \"questionnaire\" ? true : false;\n\n  const label = generateLabel(props.label, props.name);\n\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    fullWidth: true,\n  };\n\n  if (customVariant) textFieldProps.label = \"\";\n  else textFieldProps.label = label;\n\n  if (props.defaultValue !== undefined)\n    textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1)\n    textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  if (mode === \"disabled\") textFieldProps.disabled = true;\n  if (props.required !== undefined) textFieldProps.required = props.required;\n  if (props.error !== undefined) textFieldProps.error = props.error;\n  if (props.helperText !== undefined)\n    textFieldProps.helperText = props.helperText;\n  textFieldProps.InputProps = { ...props.InputProps };\n  if (mode === \"readOnly\") textFieldProps.InputProps.readOnly = true;\n\n  if (customVariant) textFieldProps.variant = \"outlined\";\n  else if (!customVariant) textFieldProps.variant = variant;\n  props.size === undefined\n    ? (textFieldProps.size = \"small\")\n    : (textFieldProps.size = props.size);\n\n  console.log(textFieldProps);\n\n  const renderCustomVariant = (inputRender) => {\n    if (variant === \"classic\") {\n      return (\n        <Box\n          display=\"flex\"\n          flexDirection=\"row\"\n          justifyContent=\"flex-start\"\n          width={props.width === undefined ? \"100%\" : props.width}\n          mt=\"20px\"\n          mb=\"20px\"\n        >\n          <Box\n            width=\"150px\"\n            textAlign=\"right\"\n            pr=\"10px\"\n            pt=\"7.5px\"\n            color={props.error ? \"#ee0000\" : \"\"}\n          >\n            <Typography>{label}:</Typography>\n          </Box>\n          <Box flex=\"1\">{inputRender}</Box>\n          <Box pl=\"10px\" pt=\"7.5px\" width=\"34px\">\n            {props.info === undefined ? \"\" : renderInfo()}\n          </Box>\n        </Box>\n      );\n    } else if (variant === \"questionnaire\") {\n      return (\n        <Box\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"flex-start\"\n          width={props.width === undefined ? \"100%\" : props.width}\n          mt=\"20px\"\n          mb=\"20px\"\n        >\n          <Box\n            display=\"flex\"\n            flexDirection=\"row\"\n            justifyContent=\"flex-start\"\n            width=\"100%\"\n            textAlign=\"left\"\n            pr=\"10px\"\n            pt=\"7.5px\"\n            color={props.error ? \"#ee0000\" : \"\"}\n          >\n            <Typography>{label}</Typography>\n            <Box pl=\"10px\" width=\"34px\">\n              {props.info === undefined ? \"\" : renderInfo()}\n            </Box>\n          </Box>\n          <Box>\n            <Box flex=\"1\">{inputRender}</Box>\n          </Box>\n        </Box>\n      );\n    } else {\n      return inputRender;\n    }\n  };\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    if (customVariant) {\n      return renderCustomVariant(\n        renderInputField(textFieldProps, autocompleteParams)\n      );\n    } else {\n      return renderInputField(textFieldProps, autocompleteParams);\n    }\n  };\n\n  const renderAutocompleteInput = (autocompleteProps, textFieldProps) => {\n    return (\n      <Autocomplete\n        {...autocompleteProps}\n        renderInput={(params) => renderInputField(textFieldProps, params)}\n      />\n    );\n  };\n\n  const renderInfo = () => {\n    return (\n      <Tooltip title={props.info}>\n        <InfoOutlinedIcon classes={{ root: classes.infoIcon }} />\n      </Tooltip>\n    );\n  };\n\n  const renderInputField = (textFieldProps, autocompleteParams) => {\n    if (autocompleteParams === undefined)\n      return <TextField {...textFieldProps} />;\n    else return <TextField {...textFieldProps} {...autocompleteParams} />;\n  };\n\n  if (mode === \"hidden\") {\n    return (\n      <div style={{ display: \"none\" }}>{renderTextField(textFieldProps)}</div>\n    );\n  } else if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = {\n      id: name + \"_autocomplete\",\n      size: \"small\",\n    };\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.options = autocompleteOptions;\n      if (props.autocompleteGetOptionSelected === undefined) {\n        autocompleteProps.getOptionSelected = (option, value) =>\n          option.value === value.value;\n      } else {\n        autocompleteProps.getOptionSelected =\n          props.autocompleteGetOptionSelected;\n      }\n      autocompleteProps.onInputChange = (event, value) => {\n        event.stopPropagation();\n        console.log(\n          \"Autocomplete - Service: \" +\n            props.autocompleteService +\n            \" | Input Value: \" +\n            value\n        );\n        fetch(\"https://swapi.dev/api/starships/?format=json\") //alternate: https://swapi-deno.azurewebsites.net/api/starships\n          .then((response) => response.json())\n          .then((options) => setAutocompleteOptions(options));\n      };\n    } else if (autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n    }\n    props.autocompleteGetOptionLabel === undefined\n      ? (autocompleteProps.getOptionLabel = (option) => option.label)\n      : (autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel);\n    return renderCustomVariant(\n      renderAutocompleteInput(autocompleteProps, textFieldProps)\n    );\n  }\n};\n\nexport default ATextField;\n"]},"metadata":{},"sourceType":"module"}