{"ast":null,"code":"var _jsxFileName = \"/Users/choonwheepeh/demo/src/components/aForm.js\";\nimport React from \"react\";\nimport { formDataToObject } from \"./utils\";\n/*\nDefault Mode\nAForm will communicate to all its field children which mode to render by default using the defaultMode prop. This allow the convinience of setting \nthe default render mode for its field children if the children does not have its own mode or settings provided. \nThis way we don't need to specify mode for every single field repeatedly if most fields should be rendered in a similar \nrender mode. Functional mode mapping to render mode also allow is to define custom functional mode to how the fields \nshould be rendered, which can be easier to keep track of how to render forms with complex workflow lifecycle stages \nwithout having to rebuilt a serparate page/component for each page.\nFunctional mode can support custom values (as long as corresponding mappings are provides) but render mode does not \nsupport custom values (since the field would not know what to actually render), so the only supported render mode values \nare [\"readOnly\"|\"edit\"|\"disabled\"|\"hidden\"].\n\nAForm gets can get mappings via \n1) defaultModeMapping prop that is passed in, \n2) via calling a backend service specified by the defaultModeMappingService\n3) predefined fallback mappings\nthe mappings are then merged in the above order of precedence when there are duplicate functional modes in the mapping. \nThis means that if the defaultModeMapping from prop and from the mapping via the service have the same functional prop defined, \nthe functional mode mapping defined by the defaultModeMapping from props will override the same mapping from the service.\n\ndefaultModeMapping: allow mappings to be specified in via props. modeMapping is an object that is used like a map. \nEach property name is the functional mode and the property value is the render mode that the field need to render.\n\ndefaultModeMappingService: takes a service end point which it will call to fetch mapping from backend service\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AForm = props => {\n  let defaultModeMapping = {\n    readOnly: \"readOnly\",\n    edit: \"edit\",\n    hidden: \"hidden\",\n    disabled: \"disabled\",\n    create: \"edit\",\n    read: \"readOnly\",\n    view: \"readOnly\",\n    update: \"edit\"\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    console.log(\"handleSubmit: \" + JSON.stringify(formDataToObject(formData)));\n    if (props.onSubmit !== undefined) props.onSubmit(event);\n  };\n\n  const fetchDefaultModeMapping = () => {\n    /*this is a mock method that returns a fixed result for testing - to be replaced with an actual service call from props.defaultModeMappingService*/\n    return {\n      review: \"readOnly\",\n      reopened: \"edit\"\n    };\n  };\n\n  let defaultModeMappingFromService;\n  if (props.defaultModeMappingService !== undefined) defaultModeMappingFromService = fetchDefaultModeMapping();\n  /* Object destructuring order is important to ensure property precedence is considered. \n  Properties on the right hand side will override those on the left if there are duplicates.\n  Merge mappings based on the following precedence: \n    1) props.defaultModeMapping (mappings from props), \n    2) defaultModeMappingFromService (mapping fetched from service), \n    3)defaultModeMpping (fallback mappings)\n    */\n\n  if (props.defaultModeMapping !== undefined) defaultModeMapping = { ...defaultModeMapping,\n    ...defaultModeMappingFromService,\n    ...props.defaultModeMapping\n  };\n  /*const childrenWithAdditionalProps = React.Children.map(\n    props.children,\n    (child) => {\n      let additionalProps = { default_mode_mapping: defaultModeMapping };\n      if (props.defaultMode) additionalProps.default_mode = props.defaultMode;\n      if (props.defaultVariant)\n        additionalProps.default_variant = props.defaultVariant;\n      return child === null\n        ? child\n        : React.cloneElement(child, additionalProps);\n    }\n  );*/\n\n  let additionalProps = {\n    default_mode_mapping: defaultModeMapping\n  };\n  if (props.defaultMode) additionalProps.default_mode = props.defaultMode;\n  if (props.defaultVariant) additionalProps.default_variant = props.defaultVariant;\n  const childrenWithAdditionalProps = cloneChildrenWithAdditionalProps(props, additionalProps);\n  React.Children.toArray(props.children).filter(n => n).map(child => {\n    return child === null ? child : /*#__PURE__*/React.cloneElement(child, additionalProps);\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      width: \"100%\"\n    },\n    children: childrenWithAdditionalProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_c = AForm;\nexport default AForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AForm\");","map":{"version":3,"sources":["/Users/choonwheepeh/demo/src/components/aForm.js"],"names":["React","formDataToObject","AForm","props","defaultModeMapping","readOnly","edit","hidden","disabled","create","read","view","update","handleSubmit","event","preventDefault","formData","FormData","target","console","log","JSON","stringify","onSubmit","undefined","fetchDefaultModeMapping","review","reopened","defaultModeMappingFromService","defaultModeMappingService","additionalProps","default_mode_mapping","defaultMode","default_mode","defaultVariant","default_variant","childrenWithAdditionalProps","cloneChildrenWithAdditionalProps","Children","toArray","children","filter","n","map","child","cloneElement","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,SAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvB,MAAIC,kBAAkB,GAAG;AACvBC,IAAAA,QAAQ,EAAE,UADa;AAEvBC,IAAAA,IAAI,EAAE,MAFiB;AAGvBC,IAAAA,MAAM,EAAE,QAHe;AAIvBC,IAAAA,QAAQ,EAAE,UAJa;AAKvBC,IAAAA,MAAM,EAAE,MALe;AAMvBC,IAAAA,IAAI,EAAE,UANiB;AAOvBC,IAAAA,IAAI,EAAE,UAPiB;AAQvBC,IAAAA,MAAM,EAAE;AARe,GAAzB;;AAWA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,CAAaH,KAAK,CAACI,MAAnB,CAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBC,IAAI,CAACC,SAAL,CAAerB,gBAAgB,CAACe,QAAD,CAA/B,CAA/B;AACA,QAAIb,KAAK,CAACoB,QAAN,KAAmBC,SAAvB,EAAkCrB,KAAK,CAACoB,QAAN,CAAeT,KAAf;AACnC,GALD;;AAOA,QAAMW,uBAAuB,GAAG,MAAM;AACpC;AACA,WAAO;AAAEC,MAAAA,MAAM,EAAE,UAAV;AAAsBC,MAAAA,QAAQ,EAAE;AAAhC,KAAP;AACD,GAHD;;AAKA,MAAIC,6BAAJ;AACA,MAAIzB,KAAK,CAAC0B,yBAAN,KAAoCL,SAAxC,EACEI,6BAA6B,GAAGH,uBAAuB,EAAvD;AAEF;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,MAAItB,KAAK,CAACC,kBAAN,KAA6BoB,SAAjC,EACEpB,kBAAkB,GAAG,EACnB,GAAGA,kBADgB;AAEnB,OAAGwB,6BAFgB;AAGnB,OAAGzB,KAAK,CAACC;AAHU,GAArB;AAMF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,MAAI0B,eAAe,GAAG;AAAEC,IAAAA,oBAAoB,EAAE3B;AAAxB,GAAtB;AACA,MAAID,KAAK,CAAC6B,WAAV,EAAuBF,eAAe,CAACG,YAAhB,GAA+B9B,KAAK,CAAC6B,WAArC;AACvB,MAAI7B,KAAK,CAAC+B,cAAV,EACEJ,eAAe,CAACK,eAAhB,GAAkChC,KAAK,CAAC+B,cAAxC;AACF,QAAME,2BAA2B,GAAGC,gCAAgC,CAAClC,KAAD,EAAQ2B,eAAR,CAApE;AAEA9B,EAAAA,KAAK,CAACsC,QAAN,CAAeC,OAAf,CAAuBpC,KAAK,CAACqC,QAA7B,EACGC,MADH,CACWC,CAAD,IAAOA,CADjB,EAEGC,GAFH,CAEQC,KAAD,IAAW;AACd,WAAOA,KAAK,KAAK,IAAV,GACHA,KADG,gBAEH5C,KAAK,CAAC6C,YAAN,CAAmBD,KAAnB,EAA0Bd,eAA1B,CAFJ;AAGD,GANH;AAQA,sBACE;AAAM,IAAA,QAAQ,EAAEjB,YAAhB;AAA8B,IAAA,KAAK,EAAE;AAAEiC,MAAAA,KAAK,EAAE;AAAT,KAArC;AAAA,cACGV;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA1ED;;KAAMlC,K;AA4EN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\nimport { formDataToObject } from \"./utils\";\n\n/*\nDefault Mode\nAForm will communicate to all its field children which mode to render by default using the defaultMode prop. This allow the convinience of setting \nthe default render mode for its field children if the children does not have its own mode or settings provided. \nThis way we don't need to specify mode for every single field repeatedly if most fields should be rendered in a similar \nrender mode. Functional mode mapping to render mode also allow is to define custom functional mode to how the fields \nshould be rendered, which can be easier to keep track of how to render forms with complex workflow lifecycle stages \nwithout having to rebuilt a serparate page/component for each page.\nFunctional mode can support custom values (as long as corresponding mappings are provides) but render mode does not \nsupport custom values (since the field would not know what to actually render), so the only supported render mode values \nare [\"readOnly\"|\"edit\"|\"disabled\"|\"hidden\"].\n\nAForm gets can get mappings via \n1) defaultModeMapping prop that is passed in, \n2) via calling a backend service specified by the defaultModeMappingService\n3) predefined fallback mappings\nthe mappings are then merged in the above order of precedence when there are duplicate functional modes in the mapping. \nThis means that if the defaultModeMapping from prop and from the mapping via the service have the same functional prop defined, \nthe functional mode mapping defined by the defaultModeMapping from props will override the same mapping from the service.\n\ndefaultModeMapping: allow mappings to be specified in via props. modeMapping is an object that is used like a map. \nEach property name is the functional mode and the property value is the render mode that the field need to render.\n\ndefaultModeMappingService: takes a service end point which it will call to fetch mapping from backend service\n*/\n\nconst AForm = (props) => {\n  let defaultModeMapping = {\n    readOnly: \"readOnly\",\n    edit: \"edit\",\n    hidden: \"hidden\",\n    disabled: \"disabled\",\n    create: \"edit\",\n    read: \"readOnly\",\n    view: \"readOnly\",\n    update: \"edit\",\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    console.log(\"handleSubmit: \" + JSON.stringify(formDataToObject(formData)));\n    if (props.onSubmit !== undefined) props.onSubmit(event);\n  };\n\n  const fetchDefaultModeMapping = () => {\n    /*this is a mock method that returns a fixed result for testing - to be replaced with an actual service call from props.defaultModeMappingService*/\n    return { review: \"readOnly\", reopened: \"edit\" };\n  };\n\n  let defaultModeMappingFromService;\n  if (props.defaultModeMappingService !== undefined)\n    defaultModeMappingFromService = fetchDefaultModeMapping();\n\n  /* Object destructuring order is important to ensure property precedence is considered. \n  Properties on the right hand side will override those on the left if there are duplicates.\n  Merge mappings based on the following precedence: \n    1) props.defaultModeMapping (mappings from props), \n    2) defaultModeMappingFromService (mapping fetched from service), \n    3)defaultModeMpping (fallback mappings)\n    */\n  if (props.defaultModeMapping !== undefined)\n    defaultModeMapping = {\n      ...defaultModeMapping,\n      ...defaultModeMappingFromService,\n      ...props.defaultModeMapping,\n    };\n\n  /*const childrenWithAdditionalProps = React.Children.map(\n    props.children,\n    (child) => {\n      let additionalProps = { default_mode_mapping: defaultModeMapping };\n      if (props.defaultMode) additionalProps.default_mode = props.defaultMode;\n      if (props.defaultVariant)\n        additionalProps.default_variant = props.defaultVariant;\n      return child === null\n        ? child\n        : React.cloneElement(child, additionalProps);\n    }\n  );*/\n\n  let additionalProps = { default_mode_mapping: defaultModeMapping };\n  if (props.defaultMode) additionalProps.default_mode = props.defaultMode;\n  if (props.defaultVariant)\n    additionalProps.default_variant = props.defaultVariant;\n  const childrenWithAdditionalProps = cloneChildrenWithAdditionalProps(props, additionalProps);\n\n  React.Children.toArray(props.children)\n    .filter((n) => n)\n    .map((child) => {\n      return child === null\n        ? child\n        : React.cloneElement(child, additionalProps);\n    });\n\n  return (\n    <form onSubmit={handleSubmit} style={{ width: \"100%\" }}>\n      {childrenWithAdditionalProps}\n    </form>\n  );\n};\n\nexport default AForm;\n"]},"metadata":{},"sourceType":"module"}