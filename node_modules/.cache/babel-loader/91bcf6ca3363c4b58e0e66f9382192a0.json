{"ast":null,"code":"var _jsxFileName = \"/Users/choonwheepeh/demo/src/components/aTextField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\nimport \"./aTextField.css\";\nimport Typography from \"@material-ui/core/Typography\";\n/*\nTextarea\nmultiline if multiline is true then rendered as a text area. If rows or maxRows are set then multiline is automatically set to true\nrows = number of rows (height) for the textarea\nmaxRows = number rows can grow until it reach maxRows. default to infinite\n\nAutoComplete\nautocompleteService: takes endpoint and calls backend service. backend service should return an array of objects with a label field. to map non standard objects set autocompleteGetOptionLabel \nautocompleteGetOptionLabel: function used to map label value to custom object. It pass the function to Material UI's TextField getOptionLabel\nautocompleteOptions: takes an array of objects with a label value by default. Use autocompleteGetOptionLabel\n\nvariant\nvariant = accepts standard material ui options like standard, filled and outlined and also added additional variations like leftLabel and topLabel. default to leftLabel\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ATextField = props => {\n  _s();\n\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\n  const [mode] = useState(props.mode);\n  const autocomplete = props.autocompleteService === undefined && props.autocompleteOptions === undefined ? false : true;\n  const variant = props.variant === undefined ? \"leftLabel\" : props.variant;\n  const customVariant = variant === \"leftLabel\" || variant === \"topLabel\" ? true : false;\n  const label = generateLabel(props.label, props.name);\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    fullWidth: true\n  };\n  if (customVariant) textFieldProps.label = \"\";else textFieldProps.label = label;\n  if (props.defaultValue !== undefined) textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1) textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  if (mode === \"disabled\") textFieldProps.disabled = true;\n  if (props.required !== undefined) textFieldProps.required = props.required;\n  if (props.error !== undefined) textFieldProps.error = props.error;\n  if (props.helperText !== undefined) textFieldProps.helperText = props.helperText;\n  textFieldProps.InputProps = { ...props.InputProps\n  };\n  if (props.mode === \"readOnly\") textFieldProps.InputProps.readOnly = true;\n  if (customVariant) textFieldProps.variant = \"outlined\";else if (!customVariant) textFieldProps.variant = props.variant;\n  props.size === undefined ? textFieldProps.size = \"small\" : textFieldProps.size = props.size;\n  console.log(textFieldProps);\n\n  const renderCustomVariant = inputRender => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"flex-start\",\n      width: props.width === undefined ? \"100%\" : props.width,\n      mt: \"20px\",\n      mb: \"20px\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        width: \"300px\",\n        textAlign: \"right\",\n        pr: \"10px\",\n        pt: \"7px\",\n        color: props.error ? \"#ee0000\" : \"\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: [label, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        flex: \"1\",\n        children: inputRender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    if (customVariant) {\n      return renderCustomVariant(renderInputField(textFieldProps, autocompleteParams));\n    } else {\n      return renderInputField(textFieldProps, autocompleteParams);\n    }\n  };\n\n  const renderAutocompleteInput = (autocompleteProps, textFieldProps) => {\n    return /*#__PURE__*/_jsxDEV(Autocomplete, { ...autocompleteProps,\n      renderInput: params => renderInputField(textFieldProps, params)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderInputField = (textFieldProps, autocompleteParams) => {\n    if (autocompleteParams === undefined) return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 14\n    }, this);else return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps,\n      ...autocompleteParams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this);\n  };\n\n  if (mode === \"hidden\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"none\"\n      },\n      children: renderTextField(textFieldProps)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  } else if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = {\n      id: name + \"_autocomplete\",\n      size: \"small\"\n    };\n\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.options = autocompleteOptions;\n\n      if (props.autocompleteGetOptionSelected === undefined) {\n        autocompleteProps.getOptionSelected = (option, value) => option.value === value.value;\n      } else {\n        autocompleteProps.getOptionSelected = props.autocompleteGetOptionSelected;\n      }\n\n      autocompleteProps.onInputChange = (event, value) => {\n        event.stopPropagation();\n        console.log(\"Autocomplete - Service: \" + props.autocompleteService + \" | Input Value: \" + value);\n        fetch(\"https://swapi-deno.azurewebsites.net/api/starships\") //alternate:\n        .then(response => response.json()).then(options => setAutocompleteOptions(options));\n      };\n    } else if (autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n    }\n\n    props.autocompleteGetOptionLabel === undefined ? autocompleteProps.getOptionLabel = option => option.label : autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel;\n    return renderCustomVariant(renderAutocompleteInput(autocompleteProps, textFieldProps));\n  }\n};\n\n_s(ATextField, \"XNhtZDytsRL5aXYS3CZSmYyCeYc=\");\n\n_c = ATextField;\nexport default ATextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"ATextField\");","map":{"version":3,"sources":["/Users/choonwheepeh/demo/src/components/aTextField.js"],"names":["React","useState","TextField","Box","Autocomplete","generateLabel","generateName","Typography","ATextField","props","autocompleteOptions","setAutocompleteOptions","mode","autocomplete","autocompleteService","undefined","variant","customVariant","label","name","textFieldProps","id","fullWidth","defaultValue","value","multiline","rows","maxRows","disabled","required","error","helperText","InputProps","readOnly","size","console","log","renderCustomVariant","inputRender","width","renderTextField","autocompleteParams","renderInputField","renderAutocompleteInput","autocompleteProps","params","display","options","autocompleteGetOptionSelected","getOptionSelected","option","onInputChange","event","stopPropagation","fetch","then","response","json","autocompleteGetOptionLabel","getOptionLabel"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\nimport \"./aTextField.css\";\nimport Typography from \"@material-ui/core/Typography\";\n\n/*\nTextarea\nmultiline if multiline is true then rendered as a text area. If rows or maxRows are set then multiline is automatically set to true\nrows = number of rows (height) for the textarea\nmaxRows = number rows can grow until it reach maxRows. default to infinite\n\nAutoComplete\nautocompleteService: takes endpoint and calls backend service. backend service should return an array of objects with a label field. to map non standard objects set autocompleteGetOptionLabel \nautocompleteGetOptionLabel: function used to map label value to custom object. It pass the function to Material UI's TextField getOptionLabel\nautocompleteOptions: takes an array of objects with a label value by default. Use autocompleteGetOptionLabel\n\nvariant\nvariant = accepts standard material ui options like standard, filled and outlined and also added additional variations like leftLabel and topLabel. default to leftLabel\n\n*/\n\nconst ATextField = (props) => {\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\n  const [mode] = useState(props.mode);\n\n  const autocomplete =\n    props.autocompleteService === undefined &&\n    props.autocompleteOptions === undefined\n      ? false\n      : true;\n\n  const variant = props.variant === undefined ? \"leftLabel\" : props.variant;\n  const customVariant =\n    variant === \"leftLabel\" || variant === \"topLabel\" ? true : false;\n\n  const label = generateLabel(props.label, props.name);\n\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    fullWidth: true,\n  };\n\n  if (customVariant) textFieldProps.label = \"\";\n  else textFieldProps.label = label;\n\n  if (props.defaultValue !== undefined)\n    textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1)\n    textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  if (mode === \"disabled\") textFieldProps.disabled = true;\n  if (props.required !== undefined) textFieldProps.required = props.required;\n  if (props.error !== undefined) textFieldProps.error = props.error;\n  if (props.helperText !== undefined)\n    textFieldProps.helperText = props.helperText;\n  textFieldProps.InputProps = { ...props.InputProps };\n  if (props.mode === \"readOnly\") textFieldProps.InputProps.readOnly = true;\n\n  if (customVariant) textFieldProps.variant = \"outlined\";\n  else if (!customVariant) textFieldProps.variant = props.variant;\n  props.size === undefined\n    ? (textFieldProps.size = \"small\")\n    : (textFieldProps.size = props.size);\n\n  console.log(textFieldProps);\n\n  const renderCustomVariant = (inputRender) => {\n    return (\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"flex-start\"\n        width={props.width === undefined ? \"100%\" : props.width}\n        mt=\"20px\"\n        mb=\"20px\"\n      >\n        <Box\n          width=\"300px\"\n          textAlign=\"right\"\n          pr=\"10px\"\n          pt=\"7px\"\n          color={props.error ? \"#ee0000\" : \"\"}\n        >\n          <Typography>{label}:</Typography>\n        </Box>\n        <Box flex=\"1\">{inputRender}</Box>\n      </Box>\n    );\n  };\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    if (customVariant) {\n      return renderCustomVariant(\n        renderInputField(textFieldProps, autocompleteParams)\n      );\n    } else {\n      return renderInputField(textFieldProps, autocompleteParams);\n    }\n  };\n\n  const renderAutocompleteInput = (autocompleteProps, textFieldProps) => {\n    return (\n      <Autocomplete\n        {...autocompleteProps}\n        renderInput={(params) => renderInputField(textFieldProps, params)}\n      />\n    );\n  };\n\n  const renderInputField = (textFieldProps, autocompleteParams) => {\n    if (autocompleteParams === undefined)\n      return <TextField {...textFieldProps} />;\n    else return <TextField {...textFieldProps} {...autocompleteParams} />;\n  };\n\n  if (mode === \"hidden\") {\n    return (\n      <div style={{ display: \"none\" }}>{renderTextField(textFieldProps)}</div>\n    );\n  } else if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = {\n      id: name + \"_autocomplete\",\n      size: \"small\",\n    };\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.options = autocompleteOptions;\n      if (props.autocompleteGetOptionSelected === undefined) {\n        autocompleteProps.getOptionSelected = (option, value) =>\n          option.value === value.value;\n      } else {\n        autocompleteProps.getOptionSelected =\n          props.autocompleteGetOptionSelected;\n      }\n      autocompleteProps.onInputChange = (event, value) => {\n        event.stopPropagation();\n        console.log(\n          \"Autocomplete - Service: \" +\n            props.autocompleteService +\n            \" | Input Value: \" +\n            value\n        );\n        fetch(\"https://swapi-deno.azurewebsites.net/api/starships\") //alternate:\n          .then((response) => response.json())\n          .then((options) => setAutocompleteOptions(options));\n      };\n    } else if (autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n    }\n    props.autocompleteGetOptionLabel === undefined\n      ? (autocompleteProps.getOptionLabel = (option) => option.label)\n      : (autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel);\n    return renderCustomVariant(\n      renderAutocompleteInput(autocompleteProps, textFieldProps)\n    );\n  }\n};\n\nexport default ATextField;\n"]},"metadata":{},"sourceType":"module"}