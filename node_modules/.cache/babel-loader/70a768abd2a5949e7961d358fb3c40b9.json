{"ast":null,"code":"var _jsxFileName = \"/Users/choonwheepeh/demo/src/components/aTextField.js\";\nimport React, { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ATextField = props => {\n  let autocomplete = props.autocompleteService === undefined && props.autocompleteOptions === undefined ? false : true;\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    label: generateLabel(props.label, props.name)\n  };\n  if (props.defaultValue !== undefined) textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1) textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n  console.log(textFieldProps);\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    console.log(textFieldProps);\n    console.log(\"params\" + autocompleteParams);\n    if (autocompleteParams === undefined) return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 14\n    }, this);else return /*#__PURE__*/_jsxDEV(TextField, { ...textFieldProps,\n      ...autocompleteParams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this);\n  };\n\n  if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = {\n      id: name + \"_autocomplete\"\n    };\n\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.onChange = () => {};\n    }\n\n    if (props.autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n    }\n\n    props.autocompleteGetOptionLabel === undefined ? autocompleteProps.getOptionLabel = option => option.label : autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel;\n    return /*#__PURE__*/_jsxDEV(Autocomplete, { ...autocompleteProps,\n      renderInput: params => renderTextField(textFieldProps, params)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_c = ATextField;\nexport default ATextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"ATextField\");","map":{"version":3,"sources":["/Users/choonwheepeh/demo/src/components/aTextField.js"],"names":["React","useEffect","useState","TextField","Autocomplete","generateLabel","generateName","ATextField","props","autocomplete","autocompleteService","undefined","autocompleteOptions","name","label","textFieldProps","id","defaultValue","value","multiline","rows","maxRows","console","log","renderTextField","autocompleteParams","autocompleteProps","onChange","options","autocompleteGetOptionLabel","getOptionLabel","option","params"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { generateLabel, generateName } from \"./utils\";\n\nconst ATextField = (props) => {\n  let autocomplete =\n    props.autocompleteService === undefined &&\n    props.autocompleteOptions === undefined\n      ? false\n      : true;\n\n  const name = generateName(props.name, props.label);\n  let textFieldProps = {\n    id: name,\n    name: name,\n    label: generateLabel(props.label, props.name),\n  };\n\n  if (props.defaultValue !== undefined)\n    textFieldProps.defaultValue = props.defaultValue;\n  if (props.value !== undefined) textFieldProps.value = props.value;\n  if (props.multiline === true || props.rows > 1 || props.maxRows > 1)\n    textFieldProps.multiline = true;\n  if (props.rows !== undefined) textFieldProps.rows = props.rows;\n  if (props.maxRows !== undefined) textFieldProps.maxRows = props.maxRows;\n\n  console.log(textFieldProps);\n\n  const renderTextField = (textFieldProps, autocompleteParams) => {\n    console.log(textFieldProps);\n    console.log(\"params\" + autocompleteParams);\n    if (autocompleteParams === undefined)\n      return <TextField {...textFieldProps} />;\n    else return <TextField {...textFieldProps} {...autocompleteParams} />;\n  };\n\n  if (!autocomplete) {\n    return renderTextField(textFieldProps);\n  } else {\n    let autocompleteProps = { id: name + \"_autocomplete\" };\n    if (props.autocompleteService !== undefined) {\n      autocompleteProps.onChange = () => {};\n    }\n    if (props.autocompleteOptions !== undefined) {\n      autocompleteProps.options = props.autocompleteOptions;\n    }\n    props.autocompleteGetOptionLabel === undefined\n      ? (autocompleteProps.getOptionLabel = (option) => option.label)\n      : (autocompleteProps.getOptionLabel = props.autocompleteGetOptionLabel);\n\n    return (\n      <Autocomplete\n        {...autocompleteProps}\n        renderInput={(params) => renderTextField(textFieldProps, params)}\n      />\n    );\n  }\n};\n\nexport default ATextField;\n"]},"metadata":{},"sourceType":"module"}